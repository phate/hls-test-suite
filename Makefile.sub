define HELP_TEXT_HLS_TEST
echo ""
echo "HLS_TEST_SUITE Make Targets"
echo "--------------------------------------------------------------------------------"
echo "hls-test-all           Compiles and runs all tests"
echo "hls-test-base          Compiles and runs basic tests"
echo "hls-test-dynamatic     Compiles and runs all test from the dynamitcs git repo"
echo "hls-test-polybench     Compiles and runs supported polybench benchmarks"
echo "hls-test-clean         Deletes build directory [$(HLS_TEST_BUILD)]"
echo "hls-test-help          Prints this help text"
endef

.PHONY: hls-test-help
hls-test-help:
	@$(HELP_TEXT_HLS_TEST)

HLS_TEST_SRC = $(HLS_TEST_ROOT)/src
HLS_TEST_BUILD = $(HLS_TEST_ROOT)/build

# Verilator trace config
VCD_TRACE = --trace -CFLAGS -DTRACE_SIGNALS
FST_TRACE = --trace -CFLAGS -DTRACE_SIGNALS -CFLAGS -DFST
# Comment out if tracing is not wanted
#VERILATOR_TRACE = $(VCD_TRACE)

NC=\033[0m
RED=\033[0;31m
GREEN=\033[0;32m
BLUE=\033[1;34m

# Set MacOS specific paths
ifeq ($(shell uname -s),Darwin)
	CFLAGS += -I/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/
endif

# Generic build target turning test .c files into executable binaries using jhls and Verilator
.PRECIOUS: $(HLS_TEST_BUILD)/%.hls
$(HLS_TEST_BUILD)/%.hls: $(HLS_TEST_SRC)/%.c
	@printf '$(BLUE)Building: $(NC)%s\n' "$*"

#   Ensure target folder exists
	@mkdir -p $(@D)

#   Creates the files %.hls.v, %.hls.harness.cpp and %.hls.o
	@$(JHLS) $< $(CFLAGS) $(HLS_TEST_ADDITIONAL_SRC) $(HLS_TEST_ADDITIONAL_FLAGS) --circt --hls-function=kernel -o $@ > /dev/null 2>&1

#   Use verilator to combine the files into a single executable %.hls
	@+set -e ; \
	VERILATOR_TMP_DIR=`mktemp -d` ; \
	trap "rm -r $$VERILATOR_TMP_DIR" EXIT ; \
	VERILATOR_ROOT=/usr/share/verilator ; \
	verilator_bin $(VERILATOR_TRACE) --cc --build --exe -Wno-WIDTH -y $(HLS_TEST_ROOT)/verilog_ops/float -y $(HLS_TEST_ROOT)/verilog_ops/float/dpi -y $(HLS_TEST_ROOT)/verilog_ops/buffer -y $(HLS_TEST_ROOT)/verilog_ops/dec_load -Mdir $$VERILATOR_TMP_DIR -MAKEFLAGS CXX=g++ -CFLAGS -g --assert -CFLAGS " -fPIC" -o $@ $@.v $@.o $@.harness.cpp $(HLS_TEST_ROOT)/verilog_ops/float/dpi/float_dpi.cpp $(VERILATOR_EXTRA_FLAGS) > /dev/null

# Execute the program, placing its output in %.hls.log
.PRECIOUS: $(HLS_TEST_BUILD)/%.hls.log
$(HLS_TEST_BUILD)/%.hls.log: $(HLS_TEST_BUILD)/%.hls
	@printf '$(BLUE)Running: $(NC)%s\n' "$*"
	@cd $(@D) && ./$(*F).hls > $(@F)

# Compares the cycle count between the executed HLS, and the golden reference. exit if different
.PHONY: cycle-compare/%
cycle-compare/%: $(HLS_TEST_BUILD)/%.hls.log $(HLS_TEST_SRC)/%.cycles
	@set -e ; \
	CYCLES=$$(grep 'finished - took' $< | tr -dc '0-9') ; \
	GOLDEN=$$(cat $(HLS_TEST_SRC)/$*.cycles) ; \
	\
	if [ "$$CYCLES" != "$$GOLDEN" ] ; then \
	    printf '$(RED)%s$(NC)\n    $(GREEN)%s$(NC)\n    $(RED)%s$(NC)\n' \
	    "The execution time of $* has changed" \
	    "Golden cycle time: $$(cat $(HLS_TEST_SRC)/$*.cycles)" \
	    "Simulated cycles: $${CYCLES}" ; \
	    echo "The execution time of $* has changed" >> $(HLS_TEST_BUILD)/cycle-diff.log ; \
	    echo "  Golden cycle time: $$(cat $(HLS_TEST_SRC)/$*.cycles)" >> $(HLS_TEST_BUILD)/cycle-diff.log ; \
	    echo "  Simulated cycles: $${CYCLES}" >> $(HLS_TEST_BUILD)/cycle-diff.log ; \
	    # FIXME: Change to 'exit 1' once jlm becomes deterministic; \
	    exit 0 ; \
	fi

# Compile the program using gcc, execute it, and place its output in %.gcc.log
$(HLS_TEST_BUILD)/%.gcc.log: $(HLS_TEST_SRC)/%.c
	@printf '$(BLUE)Building with gcc: $(NC)%s\n' "$*"
	@gcc $(HLS_TEST_SRC)/$*.c -o $(HLS_TEST_BUILD)/$*.gcc
	@cd $(@D) && ./$(*F).gcc > $(@F)

# Compares the output from running the given test using HLS + verilator, to running it with gcc
.PHONY: gcc-compare/%
gcc-compare/%: $(HLS_TEST_BUILD)/%.hls.log $(HLS_TEST_BUILD)/%.gcc.log
	@set -e ; \
	DIFF=$$(tail -n +2 $< | diff - $(HLS_TEST_BUILD)/$*.gcc.log) ; \
	if [ "$$DIFF" != "" ]; then \
		printf '    $(RED)%s$(NC): %s\n' "FAILURE" "$*" ; \
		exit 1 ; \
	fi

# Target used for running tests and comparing the cycle count to the reference
.PHONY: hls-test/%
hls-test/%: cycle-compare/%
	@printf '    $(GREEN)%s$(NC): %s\n' "SUCCESS" "$*"

# Target for running tests and comparing cycle counts, and also comparing output against gcc
.PHONY: hls-test-with-gcc/%
hls-test-with-gcc/%: cycle-compare/% gcc-compare/%
	@printf '    $(GREEN)%s$(NC): %s\n' "SUCCESS" "$*"


.PHONY: hls-test-all
hls-test-all: \
	hls-test-base \
	hls-test-benchmark \
	hls-test-polybench \
	hls-test-dynamatic \
	hls-test-decoupled


HLS_TEST_BASE_FILES = \
	base/test_return \
	base/test_arithmetic \
	base/test_loop \
	base/test_nested_loops \
	base/test_conditional \
	base/test_load \
	base/test_store_loop \
	base/test_store_loop_cond \
	base/test_store_loop_cond2 \
	base/test_array \
	base/test_gep \
	base/test_global \
	base/test_matrix \
	base/test_float \
	base/test_float2 \
	base/test_vector \
	base/test_addrq \

#	disabled for now, because decouple-mem-state does not work with localmem/alloca - should be re-done anyway
#	base/test_cpu \

.PHONY: hls-test-base
hls-test-base: $(patsubst %, hls-test/%, $(HLS_TEST_BASE_FILES))

HLS_TEST_DECOUPLED_FILES = \
	decoupled/test_stream \
	decoupled/test_sum \
	decoupled/test_sum_int \
	decoupled/test_sum_stream \
	decoupled/test_sum_decouple \
	decoupled/test_sum_decouple2 \
	decoupled/test_indirection \
	decoupled/test_indirection_stream \
	decoupled/test_indirection_decouple \
	decoupled/test_multi_sum_decouple \
	decoupled/spmv_simple \
	decoupled/spmv_stream \
	decoupled/spmv_decouple \
	decoupled/spmv_decouple_naive \
	decoupled/multi_spmv_simple \
	decoupled/multi_spmv_decouple \
	decoupled/hashtable_simple \
	decoupled/binsearch_simple \
	decoupled/binsearch_simple_for \
	decoupled/binsearch_simple_early \
	decoupled/binsearch_simple_early2 \
	decoupled/mergesort_simple \
	decoupled/mergesort_simple2 \
	decoupled/mergesort_decouple \
	decoupled/mergesort_decouple2 \
	decoupled/mergesort_decouple3 \
	decoupled/mergesort_decouple4 \

# Disabled as the cause problems when runing with ./scripts/run-hls-test.sh
#	decoupled/binsearch_decouple \
	decoupled/hashtable_decouple \
	decoupled/hashtable_decouple2 \
	decoupled/hashtable_stream \
	decoupled/binsearch_decouple_rif_for \
	decoupled/binsearch_decouple_rif_while \
	decoupled/binsearch_decouple_rif_while5 \
	decoupled/binsearch_decouple_rif_while2 \
	decoupled/binsearch_decouple_rif_while3 \
	decoupled/binsearch_decouple_rif_while4 \
	decoupled/binsearch_stream \
	decoupled/binsearch_stream_rif_while2 \

# directly returning a decouple result is not supported at the moment due to lacking smap support of ReplaceDecouple in mem-conv
#	decoupled/test_decouple_no_loop \

.PHONY: hls-test-decoupled
hls-test-decoupled: VERILATOR_EXTRA_FLAGS = $(HLS_TEST_SRC)/decoupled/c_sim/hls_stream.cpp $(HLS_TEST_SRC)/decoupled/c_sim/hls_decouple.cpp -CFLAGS -DMEMORY_LATENCY=100
hls-test-decoupled: HLS_TEST_ADDITIONAL_FLAGS = -J--latency=100
hls-test-decoupled: $(patsubst %, hls-test/%, $(HLS_TEST_DECOUPLED_FILES))

HLS_TEST_POLYBENCH_FILES = \
	polybench/correlation \
	polybench/jacobi_1d \

.PHONY: hls-test-polybench
hls-test-polybench: HLS_TEST_ADDITIONAL_SRC = $(HLS_TEST_SRC)/polybench/polybench.c
hls-test-polybench: HLS_TEST_ADDITIONAL_FLAGS = -I$(HLS_TEST_SRC)/polybench -D=DATA_TYPE_IS_INT -D=POLYBENCH_DUMP_ARRAYS -D=POLYBENCH_USE_C99_PROTO -D=MINI_DATASET
hls-test-polybench: $(patsubst %, hls-test/%, $(HLS_TEST_POLYBENCH_FILES))


HLS_TEST_DYNAMATIC_FILES = \
	dynamatic/fir \
	dynamatic/gaussian \
	dynamatic/if_loop_1 \
	dynamatic/if_loop_2 \
	dynamatic/if_loop_3 \
	dynamatic/iir \
	dynamatic/image_resize \
	dynamatic/insertion_sort \
	dynamatic/kernel_2mm \
	dynamatic/kernel_3mm \
	dynamatic/loop_array \
	dynamatic/matrix \
	dynamatic/memory_loop \
	dynamatic/mul_example \
	dynamatic/pivot \
	dynamatic/simple_example_1 \
	dynamatic/simple_example_2 \
	dynamatic/stencil_2d \
	dynamatic/sumi3_mem \
	dynamatic/test_memory_1 \
	dynamatic/test_memory_2 \
	dynamatic/test_memory_3 \
	dynamatic/test_memory_4 \
	dynamatic/test_memory_6 \
	dynamatic/test_memory_7 \
	dynamatic/test_memory_8 \
	dynamatic/test_memory_9 \
	dynamatic/test_memory_10 \
	dynamatic/test_memory_11 \
	dynamatic/test_memory_12 \
	dynamatic/test_memory_13 \
	dynamatic/test_memory_14 \
	dynamatic/test_memory_15 \
	dynamatic/test_memory_16 \
	dynamatic/test_memory_17 \
	dynamatic/test_memory_18 \
	dynamatic/threshold \
	dynamatic/vector_rescale \
	dynamatic/video_filter \
	dynamatic/bicg \
	dynamatic/gemver \
	dynamatic/matrix_power \
	dynamatic/matvec \
	dynamatic/triangular \
	\
	dynamatic/binary_search \
	dynamatic/gcd \
	dynamatic/polyn_mult \
	dynamatic/sobel \
# test_memory_5 causes non-determenistic cycle counts. It should
# be enabled once a determenistic traverser has been implemented
#	dynamatic/test_memory_5 \

.PHONY: hls-test-dynamatic
hls-test-dynamatic: $(patsubst %, hls-test-with-gcc/%, $(HLS_TEST_DYNAMATIC_FILES))


HLS_TEST_BENCHMARK_FILES = \
	benchmarks/DSS/getTanh \
	benchmarks/DSS/smm \
	benchmarks/Inter-block/matrixtrans \
	benchmarks/Inter-block/substring \
	benchmarks/PNAnalyser/vecTrans \
	benchmarks/PNAnalyser/vecTrans2 \
	# Histogram fails when included in the GitHub CI
	# Seems like Verilator runs out of resources
#	benchmarks/Inter-block/histogram \
#	benchmarks/PNAnalyser/chaosNCG \
#	benchmarks/Inter-block/los \
#	benchmarks/DSS/bnn \

.PHONY: hls-test-benchmark
hls-test-benchmark: $(patsubst %, hls-test/%, $(HLS_TEST_BENCHMARK_FILES))


.PHONY: hls-test-clean
hls-test-clean:
	@rm -rf $(HLS_TEST_BUILD)
	@rm -f $(HLS_TEST_ROOT)/hls-test-base.log
	@rm -f $(HLS_TEST_ROOT)/hls-test-polybench.log
