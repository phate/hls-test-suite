// Generated by CIRCT firtool-1.109.0

// Include register initializers in init blocks unless synthesis is set
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS


// Include rmemory initializers in init blocks unless synthesis is set
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for register randomization.

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_
// VCS coverage exclude_file
module op_HLS_BUF_64_I2W_O2W_ram_64x2(	// src/main/scala/chisel3/util/Queue.scala:73:44
  input  [5:0] R0_addr,
  input        R0_en,
               R0_clk,
  output [1:0] R0_data,
  input  [5:0] W0_addr,
  input        W0_en,
               W0_clk,
  input  [1:0] W0_data
);

  reg [1:0] Memory[0:63];	// src/main/scala/chisel3/util/Queue.scala:73:44
  reg       _R0_en_d0;	// src/main/scala/chisel3/util/Queue.scala:73:44
  reg [5:0] _R0_addr_d0;	// src/main/scala/chisel3/util/Queue.scala:73:44
  always @(posedge R0_clk) begin	// src/main/scala/chisel3/util/Queue.scala:73:44
    _R0_en_d0 <= R0_en;	// src/main/scala/chisel3/util/Queue.scala:73:44
    _R0_addr_d0 <= R0_addr;	// src/main/scala/chisel3/util/Queue.scala:73:44
  end // always @(posedge)
  always @(posedge W0_clk) begin	// src/main/scala/chisel3/util/Queue.scala:73:44
    if (W0_en & 1'h1)	// src/main/scala/chisel3/util/Queue.scala:73:44
      Memory[W0_addr] <= W0_data;	// src/main/scala/chisel3/util/Queue.scala:73:44
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_	// src/main/scala/chisel3/util/Queue.scala:73:44
    `ifdef RANDOMIZE_REG_INIT	// src/main/scala/chisel3/util/Queue.scala:73:44
      reg [31:0] _RANDOM;	// src/main/scala/chisel3/util/Queue.scala:73:44
    `endif // RANDOMIZE_REG_INIT
    reg [31:0] _RANDOM_MEM;	// src/main/scala/chisel3/util/Queue.scala:73:44
    initial begin	// src/main/scala/chisel3/util/Queue.scala:73:44
      `INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Queue.scala:73:44
      `ifdef RANDOMIZE_MEM_INIT	// src/main/scala/chisel3/util/Queue.scala:73:44
        for (logic [6:0] i = 7'h0; i < 7'h40; i += 7'h1) begin
          _RANDOM_MEM = `RANDOM;	// src/main/scala/chisel3/util/Queue.scala:73:44
          Memory[i[5:0]] = _RANDOM_MEM[1:0];	// src/main/scala/chisel3/util/Queue.scala:73:44
        end
      `endif // RANDOMIZE_MEM_INIT
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/chisel3/util/Queue.scala:73:44
        _RANDOM = {`RANDOM};	// src/main/scala/chisel3/util/Queue.scala:73:44
        _R0_en_d0 = _RANDOM[0];	// src/main/scala/chisel3/util/Queue.scala:73:44
        _R0_addr_d0 = _RANDOM[6:1];	// src/main/scala/chisel3/util/Queue.scala:73:44
      `endif // RANDOMIZE_REG_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 2'bx;	// src/main/scala/chisel3/util/Queue.scala:73:44
endmodule

module op_HLS_BUF_64_I2W_O2W_Queue64_UInt2(	// src/main/scala/chisel3/util/Queue.scala:60:7
  input        clock,	// src/main/scala/chisel3/util/Queue.scala:60:7
               reset,	// src/main/scala/chisel3/util/Queue.scala:60:7
  output       io_enq_ready,	// src/main/scala/chisel3/util/Queue.scala:72:14
  input        io_enq_valid,	// src/main/scala/chisel3/util/Queue.scala:72:14
  input  [1:0] io_enq_bits,	// src/main/scala/chisel3/util/Queue.scala:72:14
  input        io_deq_ready,	// src/main/scala/chisel3/util/Queue.scala:72:14
  output       io_deq_valid,	// src/main/scala/chisel3/util/Queue.scala:72:14
  output [1:0] io_deq_bits,	// src/main/scala/chisel3/util/Queue.scala:72:14
  output [6:0] io_count	// src/main/scala/chisel3/util/Queue.scala:72:14
);

  reg  [5:0] enq_ptr_value;	// src/main/scala/chisel3/util/Counter.scala:61:40
  reg  [5:0] deq_ptr_value;	// src/main/scala/chisel3/util/Counter.scala:61:40
  reg        maybe_full;	// src/main/scala/chisel3/util/Queue.scala:76:27
  wire       ptr_match = enq_ptr_value == deq_ptr_value;	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Queue.scala:77:33
  wire       empty = ptr_match & ~maybe_full;	// src/main/scala/chisel3/util/Queue.scala:76:27, :77:33, :78:{25,28}
  wire       full = ptr_match & maybe_full;	// src/main/scala/chisel3/util/Queue.scala:76:27, :77:33, :79:24
  wire       do_enq = ~full & io_enq_valid;	// src/main/scala/chisel3/util/Queue.scala:79:24, :103:19, src/main/scala/chisel3/util/ReadyValidIO.scala:48:35
  wire       do_deq = io_deq_ready & ~empty;	// src/main/scala/chisel3/util/Queue.scala:78:25, :102:19, src/main/scala/chisel3/util/ReadyValidIO.scala:48:35
  always @(posedge clock) begin	// src/main/scala/chisel3/util/Queue.scala:60:7
    if (reset) begin	// src/main/scala/chisel3/util/Queue.scala:60:7
      enq_ptr_value <= 6'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
      deq_ptr_value <= 6'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
      maybe_full <= 1'h0;	// src/main/scala/chisel3/util/Queue.scala:60:7, :76:27
    end
    else begin	// src/main/scala/chisel3/util/Queue.scala:60:7
      if (do_enq)	// src/main/scala/chisel3/util/ReadyValidIO.scala:48:35
        enq_ptr_value <= enq_ptr_value + 6'h1;	// src/main/scala/chisel3/util/Counter.scala:61:40, :77:24
      if (do_deq)	// src/main/scala/chisel3/util/ReadyValidIO.scala:48:35
        deq_ptr_value <= deq_ptr_value + 6'h1;	// src/main/scala/chisel3/util/Counter.scala:61:40, :77:24
      if (~(do_enq == do_deq))	// src/main/scala/chisel3/util/Queue.scala:76:27, :93:{15,27}, :94:16, src/main/scala/chisel3/util/ReadyValidIO.scala:48:35
        maybe_full <= do_enq;	// src/main/scala/chisel3/util/Queue.scala:76:27, src/main/scala/chisel3/util/ReadyValidIO.scala:48:35
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/chisel3/util/Queue.scala:60:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/chisel3/util/Queue.scala:60:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/chisel3/util/Queue.scala:60:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/main/scala/chisel3/util/Queue.scala:60:7
      automatic logic [31:0] _RANDOM[0:0];	// src/main/scala/chisel3/util/Queue.scala:60:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Queue.scala:60:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Queue.scala:60:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/chisel3/util/Queue.scala:60:7
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// src/main/scala/chisel3/util/Queue.scala:60:7
        enq_ptr_value = _RANDOM[/*Zero width*/ 1'b0][5:0];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Queue.scala:60:7
        deq_ptr_value = _RANDOM[/*Zero width*/ 1'b0][11:6];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Queue.scala:60:7
        maybe_full = _RANDOM[/*Zero width*/ 1'b0][12];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Queue.scala:60:7, :76:27
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/chisel3/util/Queue.scala:60:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/chisel3/util/Queue.scala:60:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  op_HLS_BUF_64_I2W_O2W_ram_64x2 ram_ext (	// src/main/scala/chisel3/util/Queue.scala:73:44
    .R0_addr (do_deq ? ((&deq_ptr_value) ? 6'h0 : deq_ptr_value + 6'h1) : deq_ptr_value),	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Queue.scala:106:{27,42,84}, :107:33, src/main/scala/chisel3/util/ReadyValidIO.scala:48:35
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (io_deq_bits),
    .W0_addr (enq_ptr_value),	// src/main/scala/chisel3/util/Counter.scala:61:40
    .W0_en   (do_enq),	// src/main/scala/chisel3/util/ReadyValidIO.scala:48:35
    .W0_clk  (clock),
    .W0_data (io_enq_bits)
  );	// src/main/scala/chisel3/util/Queue.scala:73:44
  assign io_enq_ready = ~full;	// src/main/scala/chisel3/util/Queue.scala:60:7, :79:24, :103:19
  assign io_deq_valid = ~empty;	// src/main/scala/chisel3/util/Queue.scala:60:7, :78:25, :102:19
  assign io_count = {full, enq_ptr_value - deq_ptr_value};	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Queue.scala:60:7, :79:24, :126:32, :129:62
endmodule

module op_HLS_BUF_64_I2W_O2W(	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:521:7
  output       i0_ready,	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:524:14
  input        i0_valid,	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:524:14
  input  [1:0] i0_data,	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:524:14
  input        o0_ready,	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:525:14
  output       o0_valid,	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:525:14
  output [1:0] o0_data,	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:525:14
  input        clk,	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:526:15
               reset	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:527:17
);

  op_HLS_BUF_64_I2W_O2W_Queue64_UInt2 queue (	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:531:27
    .clock        (clk),
    .reset        (reset),
    .io_enq_ready (i0_ready),
    .io_enq_valid (~reset & i0_valid),	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:532:22, :533:21, :534:30
    .io_enq_bits  (i0_data),
    .io_deq_ready (o0_ready),
    .io_deq_valid (o0_valid),
    .io_deq_bits  (o0_data),
    .io_count     (/* unused */)
  );	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:531:27
endmodule


