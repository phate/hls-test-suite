// Generated by CIRCT firtool-1.109.0

// Include register initializers in init blocks unless synthesis is set
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for register randomization.

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_
module op_HLS_DEC_LOAD_1_bit32_I64W_I32W_O32W_O64W_Queue1_UInt32(	// src/main/scala/chisel3/util/Queue.scala:60:7
  input         clock,	// src/main/scala/chisel3/util/Queue.scala:60:7
                reset,	// src/main/scala/chisel3/util/Queue.scala:60:7
  output        io_enq_ready,	// src/main/scala/chisel3/util/Queue.scala:72:14
  input         io_enq_valid,	// src/main/scala/chisel3/util/Queue.scala:72:14
  input  [31:0] io_enq_bits,	// src/main/scala/chisel3/util/Queue.scala:72:14
  input         io_deq_ready,	// src/main/scala/chisel3/util/Queue.scala:72:14
  output        io_deq_valid,	// src/main/scala/chisel3/util/Queue.scala:72:14
  output [31:0] io_deq_bits	// src/main/scala/chisel3/util/Queue.scala:72:14
);

  reg  [31:0] ram;	// src/main/scala/chisel3/util/Queue.scala:73:44
  reg         full;	// src/main/scala/chisel3/util/Queue.scala:76:27
  wire        io_deq_valid_0 = io_enq_valid | full;	// src/main/scala/chisel3/util/Queue.scala:76:27, :102:16, :114:{24,39}
  wire        do_enq = ~(~full & io_deq_ready) & ~full & io_enq_valid;	// src/main/scala/chisel3/util/Queue.scala:76:27, :78:28, :80:27, :103:19, :115:17, :118:{26,35}, src/main/scala/chisel3/util/ReadyValidIO.scala:48:35
  always @(posedge clock) begin	// src/main/scala/chisel3/util/Queue.scala:60:7
    if (reset)	// src/main/scala/chisel3/util/Queue.scala:60:7
      full <= 1'h0;	// src/main/scala/chisel3/util/Queue.scala:60:7, :76:27
    else if (~(do_enq == (full & io_deq_ready & io_deq_valid_0)))	// src/main/scala/chisel3/util/Queue.scala:76:27, :80:27, :81:27, :93:{15,27}, :94:16, :102:16, :114:{24,39}, :115:17, :117:14, :118:{26,35}, src/main/scala/chisel3/util/ReadyValidIO.scala:48:35
      full <= do_enq;	// src/main/scala/chisel3/util/Queue.scala:76:27, :80:27, :115:17, :118:{26,35}, src/main/scala/chisel3/util/ReadyValidIO.scala:48:35
    if (do_enq)	// src/main/scala/chisel3/util/Queue.scala:80:27, :115:17, :118:{26,35}, src/main/scala/chisel3/util/ReadyValidIO.scala:48:35
      ram <= io_enq_bits;	// src/main/scala/chisel3/util/Queue.scala:73:44
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/chisel3/util/Queue.scala:60:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/chisel3/util/Queue.scala:60:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/chisel3/util/Queue.scala:60:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/main/scala/chisel3/util/Queue.scala:60:7
      automatic logic [31:0] _RANDOM[0:1];	// src/main/scala/chisel3/util/Queue.scala:60:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Queue.scala:60:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Queue.scala:60:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/chisel3/util/Queue.scala:60:7
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;	// src/main/scala/chisel3/util/Queue.scala:60:7
        end	// src/main/scala/chisel3/util/Queue.scala:60:7
        full = _RANDOM[1'h0][0];	// src/main/scala/chisel3/util/Queue.scala:60:7, :76:27
        ram = {_RANDOM[1'h0][31:1], _RANDOM[1'h1][0]};	// src/main/scala/chisel3/util/Queue.scala:60:7, :73:44, :76:27
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/chisel3/util/Queue.scala:60:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/chisel3/util/Queue.scala:60:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_enq_ready = ~full;	// src/main/scala/chisel3/util/Queue.scala:60:7, :76:27, :103:19
  assign io_deq_valid = io_deq_valid_0;	// src/main/scala/chisel3/util/Queue.scala:60:7, :102:16, :114:{24,39}
  assign io_deq_bits = full ? ram : io_enq_bits;	// src/main/scala/chisel3/util/Queue.scala:60:7, :73:44, :76:27, :108:17, :115:17, :116:19
endmodule

module op_HLS_DEC_LOAD_1_bit32_I64W_I32W_O32W_O64W_Queue1_Bool(	// src/main/scala/chisel3/util/Queue.scala:60:7
  input  clock,	// src/main/scala/chisel3/util/Queue.scala:60:7
         reset,	// src/main/scala/chisel3/util/Queue.scala:60:7
  output io_enq_ready,	// src/main/scala/chisel3/util/Queue.scala:72:14
  input  io_enq_valid,	// src/main/scala/chisel3/util/Queue.scala:72:14
         io_deq_ready,	// src/main/scala/chisel3/util/Queue.scala:72:14
  output io_count	// src/main/scala/chisel3/util/Queue.scala:72:14
);

  reg  full;	// src/main/scala/chisel3/util/Queue.scala:76:27
  wire do_enq = ~(~full & io_deq_ready) & ~full & io_enq_valid;	// src/main/scala/chisel3/util/Queue.scala:76:27, :78:28, :80:27, :103:19, :115:17, :118:{26,35}, src/main/scala/chisel3/util/ReadyValidIO.scala:48:35
  always @(posedge clock) begin	// src/main/scala/chisel3/util/Queue.scala:60:7
    if (reset)	// src/main/scala/chisel3/util/Queue.scala:60:7
      full <= 1'h0;	// src/main/scala/chisel3/util/Queue.scala:60:7, :76:27
    else if (~(do_enq == (full & io_deq_ready & (io_enq_valid | full))))	// src/main/scala/chisel3/util/Queue.scala:76:27, :80:27, :81:27, :93:{15,27}, :94:16, :102:16, :114:{24,39}, :115:17, :117:14, :118:{26,35}, src/main/scala/chisel3/util/ReadyValidIO.scala:48:35
      full <= do_enq;	// src/main/scala/chisel3/util/Queue.scala:76:27, :80:27, :115:17, :118:{26,35}, src/main/scala/chisel3/util/ReadyValidIO.scala:48:35
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/chisel3/util/Queue.scala:60:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/chisel3/util/Queue.scala:60:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/chisel3/util/Queue.scala:60:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/main/scala/chisel3/util/Queue.scala:60:7
      automatic logic [31:0] _RANDOM[0:0];	// src/main/scala/chisel3/util/Queue.scala:60:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Queue.scala:60:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Queue.scala:60:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/chisel3/util/Queue.scala:60:7
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// src/main/scala/chisel3/util/Queue.scala:60:7
        full = _RANDOM[/*Zero width*/ 1'b0][0];	// src/main/scala/chisel3/util/Queue.scala:60:7, :76:27
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/chisel3/util/Queue.scala:60:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/chisel3/util/Queue.scala:60:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_enq_ready = ~full;	// src/main/scala/chisel3/util/Queue.scala:60:7, :76:27, :103:19
  assign io_count = full;	// src/main/scala/chisel3/util/Queue.scala:60:7, :76:27
endmodule

module op_HLS_DEC_LOAD_1_bit32_I64W_I32W_O32W_O64W(	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:555:7
  output        i0_ready,	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:558:14
  input         i0_valid,	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:558:14
  input  [63:0] i0_data,	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:558:14
  output        i1_ready,	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:559:14
  input         i1_valid,	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:559:14
  input  [31:0] i1_data,	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:559:14
  input         o0_ready,	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:560:14
  output        o0_valid,	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:560:14
  output [31:0] o0_data,	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:560:14
  input         o1_ready,	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:561:14
  output        o1_valid,	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:561:14
  output [63:0] o1_data,	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:561:14
  input         clk,	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:562:15
                reset	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:563:17
);

  wire _request_in_flight_io_enq_ready;	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:573:37
  wire _queue_io_deq_valid;	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:566:25
  wire o1_valid_0 = i0_valid & _request_in_flight_io_enq_ready;	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:573:37, :578:28
  op_HLS_DEC_LOAD_1_bit32_I64W_I32W_O32W_O64W_Queue1_UInt32 queue (	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:566:25
    .clock        (clk),
    .reset        (reset),
    .io_enq_ready (i1_ready),
    .io_enq_valid (~reset & i1_valid),	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:567:20, :568:19, :569:28
    .io_enq_bits  (i1_data),
    .io_deq_ready (o0_ready),
    .io_deq_valid (_queue_io_deq_valid),
    .io_deq_bits  (o0_data)
  );	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:566:25
  op_HLS_DEC_LOAD_1_bit32_I64W_I32W_O32W_O64W_Queue1_Bool request_in_flight (	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:573:37
    .clock        (clk),
    .reset        (reset),
    .io_enq_ready (_request_in_flight_io_enq_ready),
    .io_enq_valid (o1_ready & o1_valid_0),	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:21:11, :578:28
    .io_deq_ready (o0_ready & _queue_io_deq_valid),	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:21:11, :566:25
    .io_count     (/* unused */)
  );	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:573:37
  assign i0_ready = o1_ready & _request_in_flight_io_enq_ready;	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:555:7, :573:37, :580:28
  assign o0_valid = _queue_io_deq_valid;	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:555:7, :566:25
  assign o1_valid = o1_valid_0;	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:555:7, :578:28
  assign o1_data = i0_data;	// git/chisel-template/src/main/scala/hls_float/hls_float.scala:555:7
endmodule


